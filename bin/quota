#!/usr/bin/env bash

set -uo pipefail

mmlsquota_bin="/usr/lpp/mmfs/bin/";
lfs_bin="/opt/lustre/lustre/bin/";

export PATH="$PATH:$mmlsquota_bin:$lfs_bin";

CACHE_DIR=".arc_quota"

RED=$(tput setaf 1);
GREEN=$(tput setaf 2);
YELLOW=$(tput setaf 3);
NC=$(tput sgr0); # No color
HEADER_COLORS=($GREEN $GREEN $GREEN $GREEN $GREEN $GREEN $GREEN)

usage() {
 echo "
  SYNOPSIS
    $0 [-h] [user1 [user2 ... ]]

  DESCRIPTION
    Without any argument, quota displays filesystem quota information
    for the current user for the filesystems configured on the current
    system.

    A list of users may be optionally supplied and thier quota information
    will be displayed. Displaying quota information for any user other
    than the current user requires sudo or root privileges.

  OPTIONS
    -h      show this help text

  EXAMPLE
    $0 
    $0 pid1 pid2 pid3
    $0 -h
  "
}

print_gpfs_quota() {
	local user=$1
	echo
	printf "$(print_padding HEADER_COLORS[@] 'header')" \
			"" "GPFS" "" "" "" "" ""
	print_gpfs_work_quota "$user"
	print_gpfs_groups_quota "$user"
}

print_beegfs_quota() {
	local user=$1
	local beegfs_cache="/home/$user/$CACHE_DIR/beegfs";
	if [ -s "$beegfs_cache" ]; then
		echo
		printf "$(print_padding HEADER_COLORS[@] 'header')" \
			"" "BEEGFS" "" "" "" "" ""

		json=$(cat "$beegfs_cache");
		while read line; do
			local colors=('' '' '' '' '' '' '')

			local path=$(echo $line | awk -F\| '{print $1}');

			local size_bytes=$(echo $line | awk -F\| '{print $3}');
			local limit_bytes=$(echo $line | awk -F\| '{print $2}');

			local size_GiB=$(bytes_to_GiB "$size_bytes")
			local limit_GiB=$(bytes_to_GiB "$limit_bytes")

			local row=("$user" "$path" "$size_GiB" "$limit_GiB" "" "")
			print_row row[@] colors[@];


		done < <(cat "$beegfs_cache" | python <( echo '
from __future__ import print_function;
import sys, json;
for (k, v) in json.load(sys.stdin).items(): 
	print(k+"|" + v["limit_bytes"] + "|" + v["size_bytes"])
	pass
'))


		#local row=("$user" "/projects/nml_cf_test" "25" "0" "" "")
		#print_row row[@] colors[@];
	fi
}

print_home_quota() {
	local user=$1

	local json="";
	local home_cache="/home/$user/$CACHE_DIR/home";
	if [ -s "$home_cache" ]; then
		json=$(cat "$home_cache");
	fi

	[ -z "$json" ] && return; # skip when response is empty

	local usabe_bytes=$(echo "$json" | grep -o 'capacity_usage": "[0-9]\+"' | grep -o "[0-9]\+")
	local limit_bytes=$(echo "$json" | grep -o 'limit": "[0-9]\+"' | grep -o "[0-9]\+")

	local usage_GiB=$(bytes_to_GiB "$usabe_bytes")
	local limit_GiB=$(bytes_to_GiB "$limit_bytes")

	local colors=('' '' '' '' '' '' '')
	local row=("$user" "/home" "$usage_GiB" "$limit_GiB" "-" "-")
	print_row row[@] colors[@];
}

print_alloc_quotas() {
	local user=$1

	print_alloc_header;

	print_alloc_quota "$user" "moab"
	print_alloc_quota "$user" "slurm"
}

print_alloc_quota() {
	local user="$1";
	local alloc_type="$2";

	local json="";
	local alloc_cache="/home/$user/$CACHE_DIR/$alloc_type";
	[ -s "$alloc_cache" ] && json=$(cat "$alloc_cache");

	[ -z "$json" ] && return; # skip when response is empty

	while read line; do
		local pid=$(echo $line | awk -F\| '{print $1}');
		local alloc=$(echo $line | awk -F\| '{print $2}');
		local cluster=$(echo $line | awk -F\| '{print $3}');
		local quota=$(echo $line | awk -F\| '{print $4}');
		local left=$(echo $line | awk -F\| '{print $5}');
		local end=$(echo $line | awk -F\| '{print $6}');

		local colors=('' '' '' '' '' '' '')

		local note="";
		local end_epoch=0;
		local now_epoch=0;
		local six_mo_ago_epoch=0;
		if [[ "$end" && "$end" != "Infinity" ]]; then
			end_epoch=$(date -d "$end" +%s)
			now_epoch=$(date +%s)
			six_mo_ago_epoch=$(( now_epoch - 15780000 ));
		fi
		if [ "$end_epoch" -lt "$six_mo_ago_epoch" ]; then
			continue;
		fi
		if [ "$now_epoch" -gt "$end_epoch" ]; then
			note+="Allocation has expired. ";
			colors[1]=${YELLOW};
			colors[2]=${YELLOW};
			colors[5]=${YELLOW};
			colors[6]=${RED};
		fi
		if [ "$left" == "0.00" ]; then
			note+="Allocation has no funds. ";
			colors[1]=${YELLOW};
			colors[2]=${YELLOW};
			colors[4]=${YELLOW};
			colors[6]=${RED};
		fi

		printf "$(print_padding colors[@] 'header')" \
			"$pid" "$alloc" "$cluster" "$quota" "$left" "$end" "$note";

	done < <(cat "$alloc_cache" | python <( echo '
from __future__ import print_function;
import sys, json;
for (k, v) in json.load(sys.stdin).items(): 
	i=0;
	for f in v["funds"]: 
		alloc = f["allocated"];
		remain = f["remaining"];
		end = f["end"];

		if i == 0: 
			print("'$user'"+"|"+k+"|"+f["cluster"]+"|"+alloc+"|"+remain+"|"+end+"|")
		else:
			print("||"+f["cluster"]+"|" + alloc+"|"+remain+"|"+end+"|");
		i += 1;
'))

}

print_gpfs_work_quota() {
	local user=$1

	which mmlsquota >/dev/null 2>&1
	[ "$?" -eq "0" ] || return;

	local quota=$(mmlsquota -u $user work 2> /dev/null)

	local fs='/work'
	[ -n "$quota" ] || return;

	parse_quota "$quota" "/work"
}

parse_quota() {
	local quota="$1"
	local fs="$2"
	[ -n "$quota" ] || return;

	local current_blocksize_col='3';
	local maximum_blocksize_col='4';
	local current_files_col='1';
	local maximum_files_col='2';

	local grace_col='7';

	if [ "$fs" == "/work" ]; then
		current_blocksize_col='4';
		maximum_blocksize_col='5';

		local grace_col='8';
	fi

	local stats=$(echo "$quota" | awk 'BEGIN { RS = "" ; FS = "\n" } { print $3 }') 
	local grace=$(echo $stats | awk -F\| '{print $1}' | cut -d' ' -f${grace_col}-)
	local current_blocksize_KiB=$(echo -e "$stats" | awk '{print $'$current_blocksize_col'}')
	local maximum_blocksize_KiB=$(echo -e "$stats" | awk '{print $'$maximum_blocksize_col'}')

	local current_blocksize_GiB=$(KiB_to_GiB "$current_blocksize_KiB")
	local maximum_blocksize_GiB=$(KiB_to_GiB "$maximum_blocksize_KiB")

	local current_files=$(echo "$stats" |  awk -F\| '{print $2}' | awk '{print $'$current_files_col'}')
	local maximum_files=$(echo "$stats" |  awk -F\| '{print $2}' | awk '{print $'$maximum_files_col'}')

	local note="";
	local colors=('' '' '' '' '' '' '')

	if [ "$current_blocksize_GiB" -gt "$maximum_blocksize_GiB" ]; then
		note="You have ${grace}to reduce your data below $maximum_blocksize_GiB GiB";
		colors[2]=${RED};
		colors[6]=${RED};
	fi

	local row=("$user" "$fs" "$current_blocksize_GiB" \
		"$maximum_blocksize_GiB" "$current_files" "$maximum_files" "$note")

  print_row row[@] colors[@]
}

print_gpfs_groups_quota() {
	local user=$1

	which mmlsquota >/dev/null 2>&1
	[ "$?" -eq "0" ] || return;

	for u_group in $(groups "$user"); do
		local group_path="/groups/$u_group/";
		if [ -d "$group_path" ]; then
			local d_group=$(stat -c %G "$group_path");
			local quota=$(mmlsquota -j "$d_group" groups 2>/dev/null)
			parse_quota "$quota" "$group_path"
		fi
	done
}

print_storage_header() {
	printf "$(print_padding HEADER_COLORS[@] 'header')" \
		"USER" "FILESYS/SET" "DATA (GiB)" "QUOTA (GiB)" "FILES" "QUOTA" "NOTE"
}

print_alloc_header() {
	echo;
	printf "$(print_padding HEADER_COLORS[@] 'header')" \
		"USER" "ALLOCATION" "CLUSTER" "QUOTA (hrs)" "LEFT (hrs)" "EXPIRES" "NOTE";
}

print_row() {
	local row=("${!1}");
	local colors=("${!2-}");

	printf "$(print_padding colors[@])" "${row[@]}"
}

print_padding() {
	local colors=("${!1}");
	local pad_type=${2-};
	local pad_length="%-10 %-35 %-12 %-11 %-10 %-10 %-";
	local header_format=(s s s s s s s);
	local row_format=(s s .1f .0f s s s);
	local i=0;
	if [ "$pad_type" == "header" ]; then
		for p in $pad_length; do
			echo -n "${colors[$i]}${p}${header_format[$i]}${NC} "
			let i++;
		done
	else
		for p in $pad_length; do
			echo -n "${colors[$i]}${p}${row_format[$i]}${NC} "
			let i++;
		done
	fi
	echo "\n";
}

KiB_to_GiB() {
	local size_in_KiB="$1"
	local KiB_in_GiB=1048576;
	printf '%.0f' $(echo "$size_in_KiB / $KiB_in_GiB" | bc -l)
}

bytes_to_GiB() {
	local size_in_bytes="$1"
	local bytes_in_GiB=1073741824;
	echo "$size_in_bytes / $bytes_in_GiB" | bc -l
}

bytes_to_GB() {
	local size_in_bytes="$1"
	local bytes_in_GB=1000000000;
	echo "$size_in_bytes / $bytes_in_GB" | bc -l
}


main() {
  while getopts "dh" opt; do
    case "$opt" in
      h) usage; exit 0
    ;;
    esac
  done

	if [ $# -gt 0 ]; then
			# If we have arguments then we need root.
			if [ 0 -ne $(id -u) ]; then
					echo sudo/root required to check quota of a user list
					exit 1
			fi

			user_list=$@
	else
			# If no arguments we are checking quota for the executing user.
			user_list=$USER
	fi

	print_storage_header;
	for user in $user_list; do
		print_home_quota "$user"

		print_gpfs_quota "$user"
		print_beegfs_quota  "$user"

		print_alloc_quotas "$user"
	done

}

main "$@"
