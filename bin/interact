#!/bin/bash -l
# Script to start interactive job on ARC systems
# Only for clusters managed by Slurm

#NOTE: The bash -l above is to fix PS1 for users who don't source /etc/bashrc in their ~/.bashrc
#It may not be the ideal solution

#NOTE (jkrometi, 2/2/2021):
# Argument parsing with getopts has been removed because it's not really designed
# to pass through unknown arguments (in this case to srun). Users could break the
# simpler checks below with weird options, e.g., by naming their job "hi
# --account" but they should cover the vast majority of cases.

#user-provided arguments
original_args="$@"
#we'll add these
extra_args="--job-name='INTERACT'"

#system-specific defaults
case "${SYSNAME}" in
    tinkercliffs)
        def_partition="interactive_q"
        def_gres=""
        ;;
    infer)
        def_partition="t4_dev_q"
        def_gres="gpu:1"
        ;;
    huckleberry)
        def_partition="normal_q"
        def_gres="gpu:1"
        ;;
    cascades)
        def_partition="dev_q"
        def_gres=""
        #special gres if job mentions v100 or k80 partitions
        echo "$original_args" | grep -q "v100_\w\+_q$\|k80_q$" && def_gres="gpu:1"
        ;;
    *)
        def_partition="dev_q"
        def_gres=""
        ;;
esac

# Print help if requested or if no argument is provided
if [[ " $original_args" == *" --help"* || $# -eq 0 ]]; then 
  echo "Request an interactive job"
  echo "Usage: interact [OPTIONS]"
  echo "where OPTIONS are any valid Slurm (sbatch/salloc/srun) options, or:"
  echo "  --verbose     Print the Slurm command being run before starting job (for debugging purposes)"
  echo "  --help        Print this message"
  echo
  echo "To run, an account should be provided with -A [account] or --account=[account]. See showusage for a list of valid accounts."
  exit
fi

# Add verbosity if requested
[[ " $original_args" == *" --verbose"* ]] && verbose=1 || verbose=0

# If account not specified by user
if [[ ! " $original_args" == *" -A"* && ! " $original_args" == *" --account"* ]]; then 
  #The following appears to work to get a default account (including on TinkerCliffs)
  #However, we have disabled it for the time being so that users have to explicitly request paid accounts
  ## Get default account for user from Slurm
  #account=`scontrol show assoc users=$USER flags=users | grep -E -o "DefAccount=\S*" | tr = " " | awk '{print $2}'`
  ## Detect account = "(null)"
  #if [[ "$account" = "(null)" ]]; then
  #  echo "Could not find a default account/allocation for $USER. Quitting."
  #  exit 1
  #fi
  #echo "Using $account, the default allocation/account for $USER."
  #extra_args="--account=$account $extra_args"

  #Instead, just error out
  echo "An account must be specified with -A or --account. A list of valid accounts (and remaining balances) can be found with showusage."
  exit 1
fi

# If partition not specified by user
if [[ ! " $original_args" == *" -p"* && ! " $original_args" == *" --partition"* ]]; then 
  echo " --- No partition specified: setting --partition=$def_partition"
  extra_args="--partition=$def_partition $extra_args"
fi

# If gres not specified by user (and def_gres not empty)
if [[ ! " $original_args" == *" --gres"* && ! -z $def_gres ]]; then 
  echo " --- No gres specified: setting --gres=$def_gres"
  extra_args="--gres=$def_gres $extra_args"
fi


#Command to be run
# Later arguments appear to be given priority so add user-provided
# arguments second on the off chance of conflicts
cmd="srun $extra_args $original_args --pty $SHELL"
#Print the command being run if user requested verbose mode
[[ $verbose -gt 0 ]] && echo "Running: $cmd" 
#Run
$cmd
