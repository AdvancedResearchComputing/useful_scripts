#!/bin/bash
#Script for ARC personnel to set up a directory and 
#modulefile for a custom software installation

#usage info
function printUsage {
  echo "setup_app: Setup directory/modulefile for custom software installation"
  echo "Usage: script.sh package version"
  echo 
  echo "Options:"
  echo "  --user     Set up for personal (home directory) installation"
  echo "  --help,-h  Print this usage message"
  echo
  echo "Examples:"
  echo "  setup_app R 4.0.2-foss-2020b         #system-wide install"
  echo "  setup_app --user R 4.0.2-foss-2020b  #single-user install"
}

#e.g., tinkercliffs-rome
sysdir=$( basename $EASYBUILD_INSTALLPATH_MODULES )

#defaults for system-wide installations
appbase="/apps/packages/${sysdir}"
modbase="/apps/modulefiles/${sysdir}"

#parse input options if provided
#while [[ $# -gt 0 ]]; do
#  key="$1"
#  case $key in
#    --help)
#      printUsage
#      exit
#      ;;
#    -h)
#      printUsage
#      exit
#      ;;
#    --user)
#      appbase="$HOME/apps/${sysdir}"
#      modbase="$HOME/easybuild/modules/${sysdir}/all"
#      shift
#      ;;
#    *)
#      shift
#      ;;
#  esac
#done

for key in $@; do
  case $key in
    --help)
      printUsage
      exit
      ;;
    -h)
      printUsage
      exit
      ;;
    --user)
      appbase="$HOME/apps/${sysdir}"
      modbase="$HOME/easybuild/modules/${sysdir}/all"
      ;;
  esac
done

#if the user didn't provide two inputs, print usage info and exit
if [ ! $# -gt 1 ]; then
  printUsage
  exit 1
else
  app="$1"
  ver="$2"
  appdir="${appbase}/${app}/${ver}"
  moddir="${modbase}/${app}"
  modfl="${moddir}/${ver}.lua"

  #get user confirmation before we change anything
  read -p "Create directories $appdir and $moddir? " -n 1 -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo
    mkdir -p $appdir
    mkdir -p $moddir

    cat >$modfl <<EOF
whatis("Name: $app")
whatis("Version: $ver")
whatis("Description: SOFTWAREDESCRIPTION")
whatis("URL: SOFTWAREURL")
 
help([[
SOFTWAREDESCRIPTION
 
Define Environment Variables:
 
    \$EBROOTSOFTWARE - root
      \$SOFTWARE_DIR - root
      \$SOFTWARE_BIN - binaries
      \$SOFTWARE_INC - includes
      \$SOFTWARE_LIB - libraries
    \$SOFTWARE_LIB64 - libraries
 
Prepend Environment Variables:
 
               PATH += \$SOFTWARE_BIN
            MANPATH += \$SOFTWARE_DIR/share/man
            INCLUDE += \$SOFTWARE_INC
    LD_LIBRARY_PATH += \$SOFTWARE_LIB
    LD_LIBRARY_PATH += \$SOFTWARE_LIB64
]])
 
setenv("EBROOTSOFTWARE", "$appdir")
setenv("SOFTWARE_DIR", "$appdir")
setenv("SOFTWARE_BIN", "$appdir/bin")
setenv("SOFTWARE_INC", "$appdir/include")
setenv("SOFTWARE_LIB", "$appdir/lib64")

prepend_path("PATH", "$appdir/bin")
prepend_path("MANPATH", "$appdir/share/man")
prepend_path("INCLUDE", "$appdir/include")
prepend_path("LD_LIBRARY_PATH", "$appdir/lib")
prepend_path("LD_LIBRARY_PATH", "$appdir/lib64")
 
load("foss/2020b")
EOF

  echo "Done. To finish your build:"
  echo " 1. Install your app in $appdir/"
  echo "    - Document the installation so we know how you did it"
  echo " 2. Edit the modulefile in $modfl"
  echo "    - Replace SOFTWARE with the variable name you want to use"
  echo "    - Edit paths (some packages don't have, e.g., an include/)"
  echo "    - Set or remove modules to load in the load() line"
  echo
  echo "Note: You may need to use module --ignore_cache spider $app"
  echo "to find the module the first time."

  fi
fi
