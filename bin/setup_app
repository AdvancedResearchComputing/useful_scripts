#!/bin/bash
#Script to set up a directory and modulefile 
#for a custom software installation

#usage info
function printUsage {
  echo "setup_app: Setup directory/modulefile for custom software installation"
  echo "Usage: script.sh package version"
  echo 
  echo "Options:"
  #echo "  --user                   Set up for personal (home directory) installation"
  echo "  --base dir,--base=dir    Specify other directory for installation"
  echo "  --system                 System-wide install in /apps (arc personnel only, overridden by --base)"
  echo "  --help,-h                Print this usage message"
  echo
  echo "Examples:"
  echo "  setup_app R 4.0.2-foss-2020b                             #home directory install"
  echo "  setup_app --base=/projects/myproject R 4.0.2-foss-2020b  #install to /projects/myproject"
  echo "  setup_app --system R 4.0.2-foss-2020b                    #system-wide install (arc personnel only)"
}

#e.g., tinkercliffs-rome
sysdir=$( basename $EASYBUILD_INSTALLPATH_MODULES )

#defaults for system-wide installations
appbase="$HOME/apps/${sysdir}"
modbase="$HOME/easybuild/modules/${sysdir}/all"

#parse input options
app=""
ver=""
system_flag=""
base=""
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    --help)
      printUsage
      exit
      ;;
    -h)
      printUsage
      exit
      ;;
    --user)
      echo "Ignoring deprecated option --user (home directory install is now the default)..."
      shift
      ;;
    --system)
      system_flag=1
      shift
      ;;
    --base)
      base=$2
      shift 2
      ;;
    --base=*)
      base=${key#*=}
      shift
      ;;
    -*)
      echo "ERROR: Unrecognized flag: $key"
      echo "Printing usage information..."
      printUsage
      exit 1
      ;;
    *) #process positional arguments: app first, then ver
      [[ -z $app ]] && app=$1 || ver=$1
      shift
      ;;
  esac
done
      
#if they specified --system, set the directories      
if [[ ! -z $system_flag ]]; then
  appbase="/apps/packages/${sysdir}"
  modbase="/apps/modulefiles/${sysdir}"
fi

#if they specified --base, set the directories      
if [[ ! -z $base ]]; then
  appbase="${base}/apps/${sysdir}"
  modbase="${base}/modules/${sysdir}/all" #No real reason to include "easybuild" in directory path
fi

#if the user didn't provide an app and a version, print usage info and exit
if [[ -z $app || -z $ver ]]; then
  printUsage
  exit 1
else

  #slashes in version numbers can cause problems, so replace them with -
  ver=$( echo $ver | sed 's|/|-|g' )

  appdir="${appbase}/${app}/${ver}"
  moddir="${modbase}/${app}"
  modfl="${moddir}/${ver}.lua"

  #get user confirmation before we change anything
  read -p "Create directories $appdir and $moddir? " -n 1 -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo
    
    #create directories
    mkdir -p $appdir
    mkdir -p $moddir

    cat >$modfl <<EOF
whatis("Name: $app")
whatis("Version: $ver")
whatis("Description: SOFTWAREDESCRIPTION")
whatis("URL: SOFTWAREURL")
 
help([[
SOFTWAREDESCRIPTION
 
Define Environment Variables:
 
    \$EBROOTSOFTWARE - root
      \$SOFTWARE_DIR - root
      \$SOFTWARE_BIN - binaries
      \$SOFTWARE_INC - includes
      \$SOFTWARE_LIB - libraries
    \$SOFTWARE_LIB64 - libraries
 
Prepend Environment Variables:
 
               PATH += \$SOFTWARE_BIN
            MANPATH += \$SOFTWARE_DIR/share/man
            INCLUDE += \$SOFTWARE_INC
    LD_LIBRARY_PATH += \$SOFTWARE_LIB
    LD_LIBRARY_PATH += \$SOFTWARE_LIB64
]])
 
setenv("EBROOTSOFTWARE", "$appdir")
setenv("SOFTWARE_DIR", "$appdir")
setenv("SOFTWARE_BIN", "$appdir/bin")
setenv("SOFTWARE_INC", "$appdir/include")
setenv("SOFTWARE_LIB", "$appdir/lib64")

prepend_path("PATH", "$appdir/bin")
prepend_path("MANPATH", "$appdir/share/man")
prepend_path("INCLUDE", "$appdir/include")
prepend_path("LD_LIBRARY_PATH", "$appdir/lib")
prepend_path("LD_LIBRARY_PATH", "$appdir/lib64")
 
load("foss/2020b")
EOF

#try to guess a variable name ("ju l-i/a" -> "JULIA")
varnm=$( echo ${app^^} | sed 's/[- \/]//g' )
#set variable name in the modulefile
sed -i "s/SOFTWARE/$varnm/g" $modfl

    echo "Done. To finish your build:"
    echo " 1. Install your app in $appdir/"
    if [[ ! -z $system_flag ]]; then
      echo "    - Document the installation so we know how you did it"
    fi
    echo " 2. Edit the modulefile in $modfl"
    echo "    - Set or remove modules to load in the load() line"
    echo "    - Edit description and URL"
    echo "    - Check the variable names"
    echo "    - Edit paths (some packages don't have, e.g., an include/)"

    #if they specified --base, print an additional message
    if [[ ! -z $base ]]; then
      echo
      echo "Note: You specified a non-standard directory. You will need to add"
      echo "${modbase}"
      echo "to MODULEPATH to be able to load the module."
      echo "This can be done by adding, e.g.,"
      echo "  export MODULEPATH=\"${modbase}:\$MODULEPATH\""
      echo "to your ~/.bashrc"
    fi

    echo
    echo "Note: You may need to refresh the cache, e.g.,"
    echo "  module --ignore_cache spider $app"
    echo "to find the module the first time."
  else
    echo
  fi
fi
